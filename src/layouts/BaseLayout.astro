---
import Header from "@components/Header.astro";
import { LOCALES, DEFAULT_LOCALE } from "@lib/i18n";
import { getAbsoluteLocaleUrl } from "astro:i18n";

interface Props {
  title?: string;
  description?: string;
}
const { title = "Akira Wakita", description = "" } = Astro.props as Props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const ogLocaleMap: Record<typeof LOCALES[number], string> = {
  en: "en_US",
  ja: "ja_JP",
};

const unlocalizedPath =
  Astro.url.pathname.replace(new RegExp(`^/(?:${LOCALES.join("|")})(?=/|$)`), "") || "/";

const alternates = LOCALES.map((l) => ({
  locale: l,
  href: getAbsoluteLocaleUrl(l, unlocalizedPath),
}));

const currentOgLocale =
  ogLocaleMap[(Astro.currentLocale as (typeof LOCALES)[number]) ?? DEFAULT_LOCALE] ??
  ogLocaleMap[DEFAULT_LOCALE];
---

<!doctype html>
<html lang={Astro.currentLocale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Noto+Sans+JP:wght@100..900&display=swap"
      rel="stylesheet"
    />

    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    <link
      rel="alternate"
      hreflang="x-default"
      href={getAbsoluteLocaleUrl(DEFAULT_LOCALE, unlocalizedPath)}
    />
    {
      alternates.map(({ locale, href }) => (
        <link rel="alternate" hreflang={locale} href={href} />
      ))
    }

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:locale" content={currentOgLocale} />
    {
      LOCALES
        .filter((l) => l !== Astro.currentLocale)
        .map((l) => <meta property="og:locale:alternate" content={ogLocaleMap[l]} />)
    }

    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "WebPage",
        inLanguage: Astro.currentLocale,
        name: title,
        description,
        url: canonicalURL.toString(),
      })}>
    </script>

    <slot name="meta" />

    <!-- <link rel="icon" href="/favicon.ico" sizes="any">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"> -->
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <script>
    (function () {
      var seg = location.pathname.split('/')[1];
      if (seg === 'en' || seg === 'ja') {
        var attrs = 'Max-Age=31536000; Path=/; SameSite=Lax';
        if (location.protocol === 'https:') attrs += '; Secure';
        document.cookie = 'lang=' + seg + '; ' + attrs;
      }
    })();
    </script>
  </body>
</html>

<style is:global>
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    min-width: 0;
  }

  :root {
    color-scheme: dark;
    scrollbar-width: thin;
  }

  html {
    overflow-x: hidden;
    width: 100%;
  }

  body {
    --background-color: black;
    --font-color-title: white;
    --font-color-body: white;

    --page-padding: clamp(1rem, 2vw, 2rem);

    width: 100%;
    min-height: 100dvh;
    -webkit-overflow-scrolling: touch;
    background-color: var(--background-color);

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;

    font-family:
      "Inter", "Noto Sans JP", "Helvetica Neue", "Hiragino Kaku Gothic Pro",
      "Hiragino Sans", "Yu Gothic", "Meiryo", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    text-wrap: balance;
  }

  p {
    text-wrap: pretty;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
    width: auto;
    height: auto;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  a {
    color: inherit;
    transition: color 0.3s ease;
  }

  h1 {
    color: var(--font-color-title);
    font-weight: 500;
    line-height: 1.25;
    letter-spacing: 0.02em;
    font-size: clamp(1.8rem, 3.5vw, 2.6rem);
    margin-block: 0 0.75rem;
  }

  h2,
  h3,
  h4 {
    color: var(--font-color-title);
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.14em;
    line-height: 1.3;
  }

  h2 {
    font-size: clamp(0.95rem, 1.4vw, 1.1rem);
    margin-block: 2rem 1rem;
  }

  h3 {
    font-size: clamp(0.9rem, 1.2vw, 1rem);
    margin-block: 1.6rem 0.8rem;
  }

  h4 {
    font-size: clamp(0.85rem, 1vw, 0.95rem);
    margin-block: 1.2rem 0.6rem;
  }

  ul,
  ol {
    list-style-type: none;
    padding-left: 0;
  }

  li {
    list-style-position: inside;
    margin: 0;
    padding: 0;
  }

  li::before {
    content: "- ";
    font-size: 1em;
    line-height: 1;
    color: var(--font-color-body);
  }

  li > p {
    display: inline;
    margin: 0;
  }

  li > ul,
  li > ol {
    margin-block: 0.25rem;
    padding-inline-start: 1.25rem;
  }

  @media (prefers-reduced-motion: no-preference) {
    html {
      interpolate-size: allow-keywords;
    }
  }

  p + p {
    margin-top: 1rem;
  }

  main {
    margin-top: 10rem;
  }

  @media (max-width: 767px) {
    main {
      margin-top: 6rem;
    }
  }
</style>
