---
import BaseLayout from "@layouts/BaseLayout.astro";
import VideoEmbed from "@components/Video.astro";
import { marked } from "marked";
import { getCollection } from "astro:content";
import { imageStore } from "@lib/imageStore";
import { Picture } from "astro:assets";
import { LOCALES } from "@lib/i18n";

export async function getStaticPaths() {
  const works = await getCollection("work");

  return LOCALES.flatMap((lang) =>
    works.map((entry) => ({
      params: { lang, work: entry.id },
      props: { lang, ...entry },
    })),
  );
}

const work = Astro.props;
const description =
  Astro.currentLocale == "en"
    ? work.data.description_en
    : work.data.description_jp;
const meta =
  Astro.currentLocale == "en" ? work.data.meta_en : work.data.meta_jp;

// Get image records to access IDs for pinning
const imageRecords = imageStore.requireByWork(work.id);

// Build a case-insensitive set of available basenames
const available = new Set(imageRecords.map((r) => r.id.toLowerCase()));
const missingPins = (work.data.pin ?? []).filter(
  (id) => !available.has(id.toLowerCase()),
);
if (missingPins.length > 0) {
  const known = imageRecords.map((r) => r.id).join(", ");
  throw new Error(
    `[work:${work.id}] Unknown pinned id(s): ${missingPins.join(", ")}. Known ids: ${known}`,
  );
}

// Extract pinned IDs
const pinSet = new Set((work.data.pin ?? []).map((id) => id.trim()));

// Filter pinned and unpinned records
const pinnedRecords = imageRecords.filter((r) => pinSet.has(r.id));
const unpinnedRecords = imageRecords.filter((r) => !pinSet.has(r.id));

// Map to metadata for rendering
const pinnedImages = pinnedRecords.map((r) => r.metadata);
const unpinnedImages = unpinnedRecords.map((r) => r.metadata);

// Normalize keywords to an array
const keywordsRaw = work.data.keywords ?? [];
const keywords = Array.isArray(keywordsRaw)
  ? keywordsRaw
  : String(keywordsRaw)
      .split(",")
      .map((k) => k.trim())
      .filter(Boolean);

const firstPinned = pinnedImages.length > 0 ? pinnedImages[0] : null;
const remainingPinned = pinnedImages.slice(1);

const firstParagraph = description.split(/\n\s*\n/)[0].trim();
const firstImage =
  firstPinned ?? (unpinnedImages.length > 0 ? unpinnedImages[0] : null);
---

<BaseLayout
  title=`Akira Wakita - ${work.data.title}`
  description={firstParagraph}
>
  <Fragment slot="meta">
    {
      firstImage != null && (
        <>
          <meta property="og:image" content={firstImage.src} />
          <meta name="twitter:card" content="summary_large_image" />
        </>
      )
    }

    {
      work.data.videos && work.data.videos.length > 0 && (
        <meta property="og:video" content={work.data.videos[0]} />
      )
    }
  </Fragment>

  <article>
    <header aria-labelledby="work-title">
      <h1 id="work-title">{work.data.title}</h1>

      <div class="meta-stack">
        {work.data.year && <p class="meta-year">{work.data.year}</p>}

        {
          keywords.length > 0 && (
            <p class="meta-keywords">{keywords.join(", ")}</p>
          )
        }
      </div>
    </header>

    <!-- First pinned image before description -->
    {
      firstPinned && (
        <div class="work-grid pinned hero">
          {(() => {
            const src = firstPinned?.src ?? "";
            const alt = `${work.data.title} — image 1`;
            return (
              <a href={src} aria-label={`Open image 1 for ${work.data.title}`}>
                <Picture
                  src={firstPinned}
                  alt={alt}
                  formats={["avif", "webp"]}
                  widths={[600, 1200, 1800]}
                  sizes="(min-width: 1220px) 1200px, 100vw"
                  class="list-image"
                  loading="lazy"
                  fetchpriority="auto"
                />
              </a>
            );
          })()}
        </div>
      )
    }

    {
      description && (
        <div
          class="text-block-content intro"
          set:html={marked.parse(description)}
        />
      )
    }

    <div class="text-block-content" set:html={marked.parse(meta)} />

    {
      work.data.videos && work.data.videos.length > 0 && (
        <section aria-label="Videos" class="space-y-8">
          {work.data.videos.map((url, i) => (
            <VideoEmbed src={url} index={i} />
          ))}
        </section>
      )
    }

    <!-- Remaining pinned images grid (always 1 column) -->
    {
      remainingPinned.length > 0 && (
        <div class="work-grid pinned">
          {remainingPinned.map((img, i) => {
            const src = img?.src ?? "";
            const alt = `${work.data.title} — image ${i + 2}`;
            return (
              <a
                href={src}
                aria-label={`Open image ${i + 2} for ${work.data.title}`}
              >
                <Picture
                  src={img}
                  alt={alt}
                  formats={["avif", "webp"]}
                  widths={[600, 1200, 1800]}
                  sizes="(min-width: 1220px) 1200px, 100vw"
                  class="list-image"
                  loading="lazy"
                  fetchpriority="auto"
                />
              </a>
            );
          })}
        </div>
      )
    }

    <!-- Unpinned images grid -->
    {
      unpinnedImages.length > 0 && (
        <div class="work-grid">
          {unpinnedImages.map((img, i) => {
            const src = img?.src ?? "";
            const alt = `${work.data.title} — image ${i + 1}`;
            return (
              <a
                href={src}
                aria-label={`Open image ${i + 1} for ${work.data.title}`}
              >
                <Picture
                  src={img}
                  alt={alt}
                  formats={["avif", "webp"]}
                  widths={[400, 800, 1200]}
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  class="list-image"
                  loading="lazy"
                  fetchpriority="auto"
                />
              </a>
            );
          })}
        </div>
      )
    }

    {
      work.data.footer && (
        <div
          class="text-block-content footer"
          set:html={marked.parse(work.data.footer)}
        />
      )
    }
  </article>
</BaseLayout>

<style>
  article {
    padding: 0 var(--page-padding);
  }

  article > header {
    padding-top: clamp(2rem, 6vw, 6rem);
    color: var(--font-color-body);
  }

  h1 {
    color: var(--font-color-title);
    display: inline-block;
    position: relative;
    padding-bottom: 2px;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.18em;
    font-weight: 400;
    margin: 0;
  }

  .meta-stack {
    margin-top: 0.5rem;
    margin-bottom: 2.4rem;
    font-size: 0.8rem;
  }

  .meta-stack p {
    margin: 0;
    font-weight: 300;
    color: var(--font-color-body);
  }

  .meta-year {
    letter-spacing: 0.08em;
  }

  .meta-keywords {
    letter-spacing: 0.14em;
    text-transform: uppercase;
    margin-top: 0.2rem;
  }

  .text-block-content {
    color: var(--font-color-body);
    font-weight: 300;
    font-size: 1rem;
    line-height: 1.6;
  }
  .text-block-content :global(p) {
    line-height: 1.7;
    margin: 0;
  }
  .text-block-content :global(p + p) {
    margin-block-start: 1.6em;
  }
  .text-block-content :global(h2) {
    font-size: 1rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    font-weight: 300;
    margin-top: 2rem;
    color: var(--font-color-title);
  }
  .text-block-content :global(h3) {
    font-size: 1rem;
    letter-spacing: 0.14em;
    text-transform: uppercase;
    font-weight: 300;
    margin-top: 1.5rem;
    color: var(--font-color-title);
  }
  .text-block-content :global(ul, ol, blockquote) {
    margin-block: 1rem;
  }

  /* Image grid */
  .work-grid {
    margin: clamp(4rem, 12vw, 10rem) auto;
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    row-gap: clamp(2.5rem, 6vw, 6rem);
    column-gap: 2rem;
    align-items: end;
  }

  @media (min-width: 768px) {
    .work-grid:not(.pinned) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }

  /* When pinned (1 column): reuse page rhythm */
  .work-grid.pinned {
    row-gap: 2rem;
    column-gap: 2rem;
  }

  /* Hero pinned image adjustments */
  .work-grid.pinned.hero {
    margin: 0 auto clamp(2rem, 6vw, 6rem) auto;
  }

  /* Reduce margin between pinned and unpinned grids */
  .work-grid.pinned + .work-grid {
    margin-top: clamp(2.5rem, 6vw, 6rem);
  }

  .work-grid a {
    display: flex;
    flex-direction: column;
    text-decoration: none;
    color: inherit;
    transition: opacity 0.2s ease;
  }
  .work-grid a:hover {
    opacity: 0.96;
  }

  .work-grid a > picture {
    position: relative;
    overflow: hidden;
    border-radius: 0;
  }
  .list-image {
    display: block;
    width: 100%;
    height: auto;
  }

  /* Footer section */
  .text-block-content.footer {
    margin: 0 auto 20vh;
    padding: 0 2rem;
  }
</style>
