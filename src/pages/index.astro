---
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

// 1 = vertical, 2 = horizontal, 3 = centre-clip
const tops = await getCollection("work", ({ data }) => data.top !== undefined);
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/top/*.{png,jpg}",
  { eager: true },
);

const imageMetaMap: Record<string, ImageMetadata> = Object.fromEntries(
  Object.entries(images).map(([path, mod]) => [
    path.split("/").pop()!.split(".")[0],
    mod.default,
  ]),
);

const topsWithImages = tops.map((work) => {
  const meta = imageMetaMap[work.id];
  if (!meta) {
    throw new Error(
      `No image called \"${work.id}.png|jpg\" in /src/top for “${work.data.title}”.`,
    );
  }
  return { ...work, image: meta };
});
---
<BaseLayout>
  {
    topsWithImages.map((work) => {
      const { top } = work.data;
      const overlayCls = top === 3
        ? "overlay-fixed"
        : top === 1
        ? "overlay-vertical"
        : top === 2
        ? "overlay-horizontal"
        : "";

      return (
        <article
          class="artwork-content"
          data-top={top}
          aria-labelledby={`work-${work.id}-title`}
        >
          <Image
            src={work.image}
            alt={work.data.title}
            class="artwork-image"
            loading="lazy"
            format="webp"
          />
          <a
            href={`/works/${work.id}/`}
            class={["artwork-link", overlayCls].filter(Boolean).join(" ")}
          >
            <h2 id={`work-${work.id}-title`} class="title">
              {work.data.title}
            </h2>
            {top != 3 && <p class="description">{work.data.intro}</p>}
          </a>
        </article>
      );
    })}
</BaseLayout>

<style>
  /* ───────────────── Base section ───────────────── */
  .artwork-content {
    position: relative;
    width: 100%;
    height: 100vh; /* All sections occupy 100vh in the document flow */
    overflow: hidden;
  }

  /* image sizing */
  .artwork-content[data-top="1"] .artwork-image { width: 50%; height: auto; }
  .artwork-content[data-top="2"] .artwork-image { height: 60vh; width: auto; }
  .artwork-content[data-top="3"] .artwork-image { height: 100vh; width: 100%; object-fit: cover; }

  /* spacing so next section waits */
  .artwork-content[data-top="1"] { margin-top: 60vh; overflow: visible; }
  .artwork-content[data-top="2"] { overflow: visible; }

  .artwork-image { display:block; will-change:transform; }

  /* ───────────────── Overlay blocks ───────────────── */
  .artwork-link { text-decoration:none; color:inherit; }

  .overlay-fixed,
  .overlay-vertical,
  .overlay-horizontal {
    position: absolute; /* becomes fixed while pinned */
    padding: 0.75rem 1.25rem;
    background: rgba(255 255 255 / .85);
    backdrop-filter: blur(6px);
    border-radius: 6px;
    max-width: 60ch;
    z-index: 10;
  }
  .overlay-fixed { bottom: 2rem; right: 2rem; }
  .overlay-vertical   { top: 2rem; right: 2rem; }
  .overlay-horizontal { bottom: 2rem; left: 2rem; }

  /* switch to fixed only while pinned */
  .artwork-content.is-pinned .overlay-fixed,
  .artwork-content.is-pinned .overlay-vertical,
  .artwork-content.is-pinned .overlay-horizontal { position: fixed; }

  /* Title underline */
  .title{font-size:1rem; font-weight:500; letter-spacing:2px; margin-bottom:.3rem; display:inline-block; position:relative; padding-bottom:2px; }
  .title::after{content:""; position:absolute; left:0; bottom:0; width:0; height:1px; background:currentColor; transition:width .3s;}
  .artwork-link:hover .title::after{width:100%;}

  /* MODIFIED: Added line-clamping to truncate description text to 5 lines */
  .description{
    line-height:1.7;
    font-size:.85rem;
    color:#333;
    margin-top:.25rem;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 5;
    overflow: hidden;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  function initArtworks(){
    gsap.utils.toArray(".artwork-content").forEach(section=>{
      const img = section.querySelector("img");
      const mode = +section.dataset.top;
      if(!img.complete) img.addEventListener("load",()=>setup(section,img,mode));
      else setup(section,img,mode);
    });
  }

  function setup(section,img,mode){
    const isVertical   = mode===1;
    const isHorizontal = mode===2;
    
    // MODIFIED: Removed the explicit height setting for the vertical container.
    // This was the cause of the large whitespace gap. The section will now
    // default to 100vh from the CSS, and the pinning mechanism will handle
    // the animation duration virtually.

    const vOverflow = Math.max(0, img.offsetHeight - innerHeight);
    const hOverflow = Math.max(0, img.offsetWidth  - innerWidth);

    const start = mode === 3 ? "center center" : "top top";

    const tl = gsap.timeline({
      scrollTrigger:{
        trigger:section,
        start,
        end: () => {
            if (mode === 1) return "+=" + img.offsetHeight;
            if (mode === 2) return "+=" + (img.offsetWidth > innerWidth ? hOverflow : innerWidth / 2);
            if (mode === 3) return "+=" + innerHeight;
            return "bottom top";
        },
        pin:section,
        scrub:true,
        anticipatePin:1,
        invalidateOnRefresh:true,
        toggleClass:{targets:section,className:"is-pinned"},
      }
    });

    if(isVertical){
      tl.fromTo(img, { y: innerHeight }, { y: -vOverflow, ease: "none" });
    } else if (isHorizontal){
      const xStart = innerWidth;
      const xEnd   = -hOverflow;
      tl.fromTo(img, { x: xStart }, { x: xEnd, ease: "none" });
    } else { // Mode 3
      tl.fromTo(img,{clipPath:"inset(40% 40% 40% 40%)"},{clipPath:"inset(0% 0% 0% 0%)",ease:"none",duration:1});
    }
  }

  if(document.readyState==="complete") initArtworks();
  else addEventListener("load",initArtworks);
</script>
