---
import { getEntry, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import FloatingContainer from "@components/FloatingContainer.astro";
import VideoPlayer from "@components/VideoPlayer.astro";

interface Props {
  id: CollectionEntry<"work">["id"];
  offset: number;
  priorityLoad?: boolean;
}

const { id, offset, priorityLoad = false } = Astro.props;

const work = await getEntry("work", id);

if (!work) {
  console.warn(`[Artwork] Work with ID "${id}" not found.`);
  return null;
}

const { title, thumbnail, intro, year, has_video = false } = work.data;

// Load image from ./top folder
const images = import.meta.glob("/top/*.{png,jpg}");
const imageEntry = Object.entries(images).find(
  ([path]) => path.endsWith(`/${id}.png`) || path.endsWith(`/${id}.jpg`),
);
let topImage;
if (!has_video && !imageEntry) {
  throw new Error(`No image found for artwork ID "${id}" in ./top folder`);
}
if (imageEntry) {
  topImage = (await imageEntry[1]()) as { default: ImageMetadata };
}

const videoSrcMp4 = `https://pub-a62e56dba43847909d2a4aeee8b7c674.r2.dev/${id}.mp4`;
---

<FloatingContainer {offset}>
  <article class="artwork-content">
    <div class="media-container">
      {
        has_video ? (
          <VideoPlayer
            sources={{ mp4: videoSrcMp4 }}
            thumbnail={topImage ? topImage.default : thumbnail}
            alt={`${title} video`}
          />
        ) : (
          <Image
            src={topImage!.default}
            alt={title}
            class="artwork-image"
            loading={priorityLoad ? "eager" : "lazy"}
            decoding={priorityLoad ? "sync" : "auto"}
            fetchpriority={priorityLoad ? "high" : "auto"}
          />
        )
      }
    </div>
    <a href={`/works/${id}/`} class="artwork-link">
      <h2 class="title">{title}</h2>
      <p class="description">{intro}</p>
    </a>
    <p class="year">{year}</p>
  </article>
</FloatingContainer>

<style>
  /* Styles are now scoped to the content *within* the FloatingContainer */
  .artwork-content {
    /* Add styles if needed to arrange items inside the article */
  }

  .artwork-link {
    text-decoration: none;
    color: inherit;
    display: block;
    margin-top: 2rem;
  }

  .artwork-image {
    display: block;
    width: 100%;
    /* Default mobile styles */
    max-height: 70vh; /* Max 70% of viewport height */
    object-fit: contain; /* Preserve aspect ratio */
    object-position: center; /* Center the content */
    margin-bottom: 0.8rem;
  }

  .title {
    font-size: 1rem;
    font-weight: 500;
    margin-bottom: 0.3rem;
    letter-spacing: 2px;
    display: inline-block; /* Allows text-decoration to have padding */
    position: relative; /* For pseudo-element */
    padding-bottom: 2px; /* Space for the underline */
    transition: color 0.2s ease-in-out; /* Smooth color transition */
  }

  .artwork-link:hover .title::after {
    width: 100%;
  }

  .title::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    height: 1px; /* Underline thickness */
    background-color: currentColor; /* Use text color for underline */
    transition: width 0.3s ease-in-out; /* Underline animation */
  }

  .description {
    line-height: 1.7;
    color: #333;
    margin-bottom: 0.5rem;
    /* Add line clamping properties */
    display: -webkit-box;
    -webkit-line-clamp: 5; /* Limit to 5 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 0.85rem;
  }

  .year {
    margin-top: 0.5rem;
    font-size: 0.8rem;
    font-weight: 400;
    color: #333;
    font-family: monospace;
  }
</style>

