---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { getEntries, getEntry } from 'astro:content';

type Props = {
  workIds: string[];
};

const { workIds } = Astro.props;

// Batch fetch all works at once
const workEntries = await Promise.all(
  workIds.map(id => getEntry('work', id))
);

// Filter out any undefined entries (in case some IDs are invalid)
const works = workEntries.filter(entry => entry !== undefined);
---

<div class="alternating-gallery">
  {works.map((work, index) => (
    <section class={`gallery-item ${index % 2 === 0 ? 'image-left' : 'image-right'}`}>
      <div class="image-container">
        <Picture 
          src={work.data.thumbnail} 
          alt={work.data.title}
          formats={['avif', 'webp']} 
          widths={[480, 800, 1200, 1600]} 
          sizes="(max-width: 768px) 100vw, 50vw"
          class="artwork-image"
          loading={index === 0 ? "eager" : "lazy"}
        />
      </div>
      <div class="content-container">
        <div class="content-wrapper">
          <h2 class="artwork-title">{work.data.title}</h2>
          {work.data.year && <p class="artwork-year">{work.data.year.toString()}</p>}
          {work.data.intro && <div class="artwork-description">{work.data.intro}</div>}
          <div class="action-button">
            <a href={`/works/${work.id}`} class="more-link">More Information</a>
          </div>
        </div>
      </div>
    </section>
  ))}
</div>

<style>
  .alternating-gallery {
    width: 100%;
    color: white;
    max-width: 100vw;
    overflow-x: hidden;
  }

  .gallery-item {
    display: flex;
    min-height: 80vh;
    position: relative;
    flex-direction: row;
    box-sizing: border-box;
  }

  .image-right {
    flex-direction: row-reverse;
  }

  .image-container {
    width: 60%;
    height: 80vh;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    box-sizing: border-box;
  }

  .artwork-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content-container {
    width: 40%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background-color: rgba(0, 0, 0, 0.7);
    box-sizing: border-box;
  }

  .content-wrapper {
    max-width: 480px;
    padding: 2rem;
    box-sizing: border-box;
  }

  .artwork-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    line-height: 1.2;
    color: white;
  }

  .artwork-year {
    font-size: 1.2rem;
    color: #aaa;
    margin: 0 0 1.5rem 0;
  }

  .artwork-description {
    font-size: 1.1rem;
    line-height: 1.6;
    margin-bottom: 2rem;
    color: #e0e0e0;
  }

  .action-button {
    margin-top: 2rem;
  }

  .more-link {
    display: inline-block;
    border: 1px solid white;
    padding: 0.8rem 1.5rem;
    text-decoration: none;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .more-link:hover {
    background-color: white;
    color: black;
  }

  /* Media queries for responsive design */
  @media (max-width: 1024px) {
    .artwork-title {
      font-size: 2rem;
    }
    
    .content-wrapper {
      padding: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .gallery-item, .image-right {
      flex-direction: column;
      min-height: auto;
    }

    .image-container {
      width: 100%;
      height: 60vh;
    }

    .content-container {
      width: 100%;
      padding: 3rem 1.5rem;
    }
    
    .content-wrapper {
      padding: 1.5rem;
      width: 100%;
    }
  }

  @media (max-width: 480px) {
    .artwork-title {
      font-size: 1.8rem;
    }
    
    .image-container {
      height: 50vh;
    }
    
    .content-wrapper {
      padding: 1rem;
    }
  }
</style> 