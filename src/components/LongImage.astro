---
import { getEntry } from "astro:content";
import { getImage } from "astro:assets";
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";
import TextInfo from "./TextInfo.astro";
interface Props {
  id: string;
  image: ImageMetadata; // desktop/tablet
  mobile?: ImageMetadata | ImageMetadata[]; // optional mobile art direction, can be single or array
}
const { id, image, mobile = null } = Astro.props;
const work = await getEntry("work", id);
if (!work) throw new Error(`No work found by id ${id}`);
const alt = work.data.title;
const isMobileArray = Array.isArray(mobile);
// Build desktop variants
const formats = ["avif", "webp"];
const desktopVariants = await Promise.all(
  formats.map((format) => getImage({ src: image, format })),
);
const desktopFallback = await getImage({ src: image, format: "png" });
// Build mobile variants if single
let mobileVariants = null;
let mobileFallback = null;
if (!isMobileArray && mobile) {
  mobileVariants = await Promise.all(
    formats.map((format) => getImage({ src: mobile as ImageMetadata, format })),
  );
  mobileFallback = await getImage({
    src: mobile as ImageMetadata,
    format: "png",
  });
}
---

<article
  class="artwork-content long-image"
  aria-labelledby={`work-${work.id}-title}`}
>
  {
    !isMobileArray ? (
      <picture class="artwork-image">
        {mobile && mobileVariants && (
          <>
            {mobileVariants.map((img) => (
              <source
                srcset={
                  img.srcSet.values.length ? img.srcSet.attribute : img.src
                }
                type={`image/${img.options.format}`}
                media="(max-width: 767px)"
                sizes="100vw"
              />
            ))}
          </>
        )}
        {desktopVariants.map((img) => (
          <source
            srcset={img.srcSet.values.length ? img.srcSet.attribute : img.src}
            type={`image/${img.options.format}`}
            media={mobile ? "(min-width: 768px)" : undefined}
            sizes="70vw"
          />
        ))}
        <img
          src={
            mobile && mobileFallback ? mobileFallback.src : desktopFallback.src
          }
          alt={alt}
          loading="lazy"
          decoding="async"
        />
      </picture>
    ) : (
      <>
        <picture class="artwork-image desktop-only">
          {desktopVariants.map((img) => (
            <source
              srcset={img.srcSet.values.length ? img.srcSet.attribute : img.src}
              type={`image/${img.options.format}`}
              sizes="70vw"
            />
          ))}
          <img
            src={desktopFallback.src}
            alt={alt}
            loading="lazy"
            decoding="async"
          />
        </picture>
        <div class="mobile-images mobile-only">
          {(mobile as ImageMetadata[]).map((mobImg, index) => (
            <Picture
              src={mobImg}
              formats={formats}
              alt={`${alt} - part ${index + 1}`}
              loading="lazy"
              class="artwork-image"
            />
          ))}
        </div>
      </>
    )
  }
  <TextInfo id={work.id} work={work} />
</article>

<style>
  .artwork-content {
    display: flex;
    align-items: flex-start;
    width: 100%;
    margin-bottom: 30vh;
    overflow: visible;
  }
  .artwork-image {
    width: 70%;
    flex-shrink: 0;
    display: block;
  }
  .artwork-image > img {
    width: 100%;
    height: auto;
    display: block;
  }
  .desktop-only {
    display: block;
  }
  .mobile-only {
    display: none;
  }
  .mobile-images {
    width: 100%;
    flex-direction: column;
    gap: 0.5rem;
  }
  @media (max-width: 767px) {
    .artwork-content {
      flex-direction: column;
      margin-bottom: 5vh;
    }
    .artwork-image {
      width: 100%;
    }
    .desktop-only {
      display: none;
    }
    .mobile-only {
      display: flex;
    }
  }
</style>
