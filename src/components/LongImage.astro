---
import { getEntry } from "astro:content";
import { getImage } from "astro:assets";
import type { ImageMetadata } from "astro";
import TextInfo from "./TextInfo.astro";
interface Props {
  id: string;
  image: ImageMetadata; // desktop/tablet
  mobile?: ImageMetadata; // optional mobile art direction
}
const { id, image, mobile = null } = Astro.props;
const work = await getEntry("work", id);
if (!work) throw new Error(`No work found by id ${id}`);
const alt = work.data.title;
// Build mobile/desktop variants
const formats = ["avif", "webp"];
const desktop = await Promise.all(
  formats.map((format) => getImage({ src: image, format })),
);
const desktopFallback = await getImage({ src: image, format: "png" });
let mobileSet = null;
let mobileFallback = null;
if (mobile) {
  mobileSet = await Promise.all(
    formats.map((format) => getImage({ src: mobile, format })),
  );
  mobileFallback = await getImage({ src: mobile, format: "png" });
}
---

<article
  class="artwork-content long-image"
  aria-labelledby={`work-${work.id}-title`}
>
  <picture class="artwork-image">
    {
      mobile && mobileSet && (
        <>
          {mobileSet.map((img) => (
            <source
              srcset={img.srcSet.values.length ? img.srcSet.attribute : img.src}
              type={`image/${img.options.format}`}
              media="(max-width: 767px)"
              sizes="100vw"
            />
          ))}
        </>
      )
    }
    {
      desktop.map((img) => (
        <source
          srcset={img.srcSet.values.length ? img.srcSet.attribute : img.src}
          type={`image/${img.options.format}`}
          media={mobile ? "(min-width: 768px)" : undefined}
          sizes={mobile ? "70vw" : "70vw"}
        />
      ))
    }
    <img
      src={mobile && mobileFallback ? mobileFallback.src : desktopFallback.src}
      alt={alt}
      loading="lazy"
      decoding="async"
    />
  </picture>
  <TextInfo
    id={work.id}
    title={work.data.title}
    description={work.data.description_jp}
  />
</article>

<style>
  .artwork-content {
    display: flex;
    align-items: flex-start;
    width: 100%;
    margin-bottom: 30vh;
    overflow: visible;
  }
  .artwork-image {
    width: 70%;
    flex-shrink: 0;
    display: block;
  }
  .artwork-image > img {
    width: 100%;
    height: auto;
    display: block;
  }
  @media (max-width: 767px) {
    .artwork-content {
      flex-direction: column;
      margin-bottom: 5vh;
    }
    .artwork-image {
      width: 100%;
    }
  }
</style>
