---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

type Props = {
  images: {
    src: ImageMetadata;
    alt: string;
  }[];
};

const { images } = Astro.props;
const lastImage = images.length > 0 ? images[images.length - 1] : null;
---

<div class="scroll-container" aria-roledescription="carousel" aria-label="Image gallery">
  {/* Fixed transition container for all images */}
  <div class="transition-container">
    {images.map((image, index) => (
      <div 
        class="image-layer" 
        data-index={index} 
        aria-hidden={index !== 0 ? "true" : "false"}
        role="img" 
        aria-label={image.alt}
      >
        <Picture 
          src={image.src} 
          alt={image.alt} 
          formats={['avif', 'webp']} 
          widths={[360, 480, 720, 1024, 1920, 2048]} 
          sizes="100vw"
          loading={index === 0 ? "eager" : "lazy"}
        />
      </div>
    ))}
  </div>
  
  {/* Spacer to create scroll space for transition images */}
  <div class="transition-spacer"></div>
  
  {/* Last image as a normal document flow element */}
  {lastImage && (
    <div class="last-image" aria-hidden="true">
      <Picture 
        src={lastImage.src} 
        alt={lastImage.alt} 
        formats={['avif', 'webp']} 
        widths={[360, 480, 720, 1024, 1920, 2048]} 
        sizes="100vw"
        loading="lazy"
      />
    </div>
  )}
</div>

<style>
  .scroll-container {
    position: relative;
    width: 100%;
    background: black;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
  }

  .transition-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    z-index: 10;
    will-change: opacity; /* Performance optimization for opacity animations */
  }

  .image-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.2s ease-out;
    backface-visibility: hidden; /* Prevents flickering on some browsers */
    transform: translateZ(0); /* Force GPU acceleration */
  }

  .image-layer:first-child {
    opacity: 1;
  }

  .image-layer img,
  .last-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Mobile optimization - shorter height on small devices */
  @media (max-height: 500px) {
    .transition-container,
    .last-image {
      height: 100%;
    }
  }

  .transition-spacer {
    height: calc(100vh * var(--transition-sections, 1));
  }

  .last-image {
    position: relative;
    width: 100%;
    height: 100vh;
  }
</style>

<script>
  // Feature detection
  const supportsPassiveEvents = (() => {
    let passiveSupported = false;
    try {
      const options = {
        get passive() {
          passiveSupported = true;
          return false;
        }
      };
      // @ts-ignore - Test passive event listeners
      window.addEventListener("test", null, options);
      // @ts-ignore - Remove test listener
      window.removeEventListener("test", null, options);
    } catch (err) {
      passiveSupported = false;
    }
    return passiveSupported;
  })();

  // Get DOM elements with error handling
  function getElementSafely<T extends HTMLElement>(selector: string): T | null {
    try {
      return document.querySelector(selector) as T | null;
    } catch (error) {
      console.error(`Error selecting ${selector}:`, error);
      return null;
    }
  }

  const container = getElementSafely<HTMLElement>('.scroll-container');
  const transitionContainer = getElementSafely<HTMLElement>('.transition-container');
  const transitionImages = document.querySelectorAll('.image-layer') as NodeListOf<HTMLElement>;
  const lastNormalImage = getElementSafely<HTMLElement>('.last-image');
  const totalTransitionImages = transitionImages.length;
  
  // Exit early if there are no images to transition
  if (totalTransitionImages === 0) {
    if (container) {
      container.style.height = '100vh';
    }
    if (transitionContainer) {
      transitionContainer.style.display = 'none';
    }
  }
  
  // Constants for controlling the scroll behavior
  const STATIC_PHASE = 0.7; // 70% of scroll distance is static (opacity = 1)
  const TRANSITION_PHASE = 0.3; // 30% is transition phase
  
  // Calculate section heights
  let sectionHeight = window.innerHeight; // Each image section is full viewport height
  
  // Set the total height for scrolling - we need one less viewport height if we have a separate last image
  const hasSeparateLastImage = lastNormalImage !== null && totalTransitionImages > 1;
  const effectiveTransitionSections = hasSeparateLastImage 
    ? totalTransitionImages - 1 
    : totalTransitionImages;
  
  const spacer = getElementSafely<HTMLElement>('.transition-spacer');
  if (spacer) {
    spacer.style.setProperty('--transition-sections', String(effectiveTransitionSections));
  }
  
  // Use requestAnimationFrame for smoother scrolling
  let ticking = false;
  let isDestroyed = false; // Track if component is destroyed
  
  function updateScroll() {
    if (isDestroyed || !container || !transitionContainer || totalTransitionImages === 0) return;
    
    try {
      // Guard against negative scroll values (overscroll up)
      const scrollTop = Math.max(0, window.scrollY);
      
      // Calculate which section we're in
      const currentSection = Math.min(Math.floor(scrollTop / sectionHeight), totalTransitionImages - 1);
      
      // Calculate how far we are through the current section (0 to 1)
      const sectionProgress = (scrollTop % sectionHeight) / sectionHeight;
      
      // Determine if we should transition to the next image
      const inTransitionPhase = sectionProgress > STATIC_PHASE;
      
      // Calculate the transition progress (0 to 1) if in transition phase
      const transitionProgress = inTransitionPhase 
        ? (sectionProgress - STATIC_PHASE) / TRANSITION_PHASE 
        : 0;
      
      // Only calculate these values if we have multiple images
      let pastLastImageTransition = false;
      if (totalTransitionImages > 1) {
        // Calculate when the transition to the last image is complete
        const secondToLastImageIndex = totalTransitionImages - 2;
        const lastImageTransitionStart = sectionHeight * secondToLastImageIndex + (STATIC_PHASE * sectionHeight);
        const lastImageTransitionEnd = lastImageTransitionStart + (TRANSITION_PHASE * sectionHeight);
        
        // Check if we've passed the point where the last image is fully transitioned in
        pastLastImageTransition = scrollTop >= lastImageTransitionEnd;
        
        // Handle last image transition if we have a separate normal flow image
        if (hasSeparateLastImage && lastNormalImage) {
          if (pastLastImageTransition) {
            // Once the last image is fully visible, hide the transition container
            transitionContainer.style.opacity = '0';
            transitionContainer.style.visibility = 'hidden';
            transitionContainer.style.pointerEvents = 'none';
            
            // Make sure normal flow image is fully visible
            lastNormalImage.style.opacity = '1';
          } else {
            // Normal transition behavior
            transitionContainer.style.opacity = '1';
            transitionContainer.style.visibility = 'visible';
            transitionContainer.style.pointerEvents = 'auto';
            
            // Show the normal flow last image during the last transition
            if (currentSection === secondToLastImageIndex && inTransitionPhase) {
              // Fade in the normal image as we transition to the last image
              lastNormalImage.style.opacity = String(transitionProgress);
            } else {
              lastNormalImage.style.opacity = '0';
            }
          }
        }
        
        // Update accessibility attributes for screen readers
        transitionImages.forEach((img, i) => {
          img.setAttribute('aria-hidden', i === currentSection ? 'false' : 'true');
        });
      }
      
      // Update image opacities in the transition container
      // Only update the images that need changing to improve performance
      transitionImages.forEach((img, i) => {
        let newOpacity = '0';
        
        if (i === currentSection) {
          // Current image - fade out if in transition phase
          newOpacity = inTransitionPhase 
            ? String(1 - transitionProgress) 
            : '1';
        } else if (i === currentSection + 1 && inTransitionPhase) {
          // Next image - fade in if in transition phase
          newOpacity = String(transitionProgress);
        }
        
        // Only update the DOM if the opacity needs to change
        if (img.style.opacity !== newOpacity) {
          img.style.opacity = newOpacity;
        }
      });
    } catch (error) {
      console.error('Error in scroll transition update:', error);
    }
    
    ticking = false;
  }

  // Throttle scroll events with requestAnimationFrame
  function onScroll() {
    if (!ticking && !isDestroyed) {
      requestAnimationFrame(updateScroll);
      ticking = true;
    }
  }

  // Debounce function for resize
  function debounce(func: Function, wait: number) {
    let timeout: number | null = null;
    return function(...args: any[]) {
      const later = () => {
        timeout = null;
        func(...args);
      };
      if (timeout !== null) {
        clearTimeout(timeout);
      }
      timeout = setTimeout(later, wait) as unknown as number;
    };
  }

  // Handle resize properly - recalculate dimensions
  function onResize() {
    if (isDestroyed) return;
    
    // Update section height
    sectionHeight = window.innerHeight;
    // Force recalculation
    ticking = false;
    updateScroll();
  }
  
  const debouncedResize = debounce(onResize, 150);
  
  // Add touch event listeners for better mobile experience
  let touchStartY = 0;
  function onTouchStart(e: TouchEvent) {
    touchStartY = e.touches[0].clientY;
  }

  // Set up event listeners with passive option where supported
  const passiveOption = supportsPassiveEvents ? { passive: true } : false;
  window.addEventListener('scroll', onScroll, passiveOption);
  window.addEventListener('resize', debouncedResize);
  window.addEventListener('touchstart', onTouchStart, passiveOption);
  
  // Clean up function to remove event listeners
  function cleanup() {
    isDestroyed = true;
    window.removeEventListener('scroll', onScroll);
    window.removeEventListener('resize', debouncedResize);
    window.removeEventListener('touchstart', onTouchStart);
  }
  
  // Set up cleanup when page changes - works with most SPA frameworks
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      cleanup();
    }
  });
  
  // Initial update
  updateScroll();
</script>