---
interface Props {
  title: string;
  workIds: string[];
}

import { getEntry } from "astro:content";
import { Picture } from 'astro:assets';

const { title, workIds } = Astro.props;
const works = 
  (await Promise.all(workIds.map(async id => await getEntry('work', id))))
  .filter(work => work !== undefined);
---

<div class="work-collection">
  <h2>{title}</h2>
  {works.map(work => (
    <div class="work-item">
      <div class="work-header">
        <h3>{work.data.title}</h3>
        <p>{work.data.intro}</p>
      </div>
      <div class="image-grid">
        <Picture src={work.data.thumbnail} alt={work.data.title} formats={['avif', 'webp']}  />
        <Picture src={work.data.background_img.url} alt={work.data.background_img.label} formats={['avif', 'webp']}  />
        {work.data.imgs.map(image => (
          <Picture src={image.url} alt={image.label} formats={['avif', 'webp']}  />
        ))}
      </div>
    </div>
  ))}
</div>

<style>
  .work-collection {
    margin: 2rem 0;
  }

  h2 {
    padding: 0 2rem;
  }

  .work-item > * {
    padding: 0 2rem;
  }

  .work-item {
    padding: 2rem 0;
    border-bottom: 1px solid #eee;
  }

  .work-item:last-child {
    border-bottom: none;
  }

  .work-header {
    margin-bottom: 1.5rem;
  }

  .work-header h3 {
    margin: 0 0 0.5rem 0;
    font-weight: normal;
  }

  .work-header p {
    margin: 0;
    color: #666;
    line-height: 1.5;
  }

  .image-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    padding: 0 2rem;
  }

  @media (min-width: 768px) {
    .image-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }

  picture {
    width: 100%;
    margin: 0;
    display: block;
  }
  
  picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 16/9;
  }
</style>
